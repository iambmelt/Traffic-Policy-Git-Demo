name: Create ngrok Endpoint (deployment branch)

on:
  push:
    branches: [ deployment ]

permissions:
  contents: read

env:
  NGROK_API_URL: https://api.ngrok.com/endpoints
  NGROK_API_VERSION: "2"

jobs:
  deploy:
    runs-on: ubuntu-latest
    # environment: production   # <- uncomment if youâ€™re using an Environment secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure required files exist
        run: |
          set -e
          test -f config.yml || { echo "::error::Missing config.yml in branch"; exit 1; }
          test -f policy.yml || { echo "::error::Missing policy.yml in branch"; exit 1; }

      - name: Install tools (yq, jq)
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y -qq jq >/dev/null
          yq --version
          jq --version

      - name: Validate and read config.yml
        id: cfg
        shell: bash
        run: |
          set -euo pipefail

          # Required fields
          URL=$(yq -r '.url // ""'  config.yml)
          TYPE=$(yq -r '.type // ""' config.yml)

          if [[ -z "$URL" ]]; then
            echo "::error::config.yml is missing required key: url"
            exit 1
          fi
          if [[ -z "$TYPE" ]]; then
            echo "::error::config.yml is missing required key: type"
            exit 1
          fi

          # Optional fields (empty string if absent)
          DESC=$(yq -r '.description // ""' config.yml)
          META=$(yq -r '.metadata // ""'    config.yml)
          # boolean -> string if present, else ""
          POOL=$(yq -r '(.pooling_enabled // "") | tostring' config.yml)

          {
            echo "url<<__EOF__";  echo -n "$URL";  echo; echo "__EOF__"
            echo "type=$TYPE"
            echo "desc<<__EOF__"; echo -n "$DESC"; echo; echo "__EOF__"
            echo "meta<<__EOF__"; echo -n "$META"; echo; echo "__EOF__"
            echo "pool=$POOL"
          } >> "$GITHUB_OUTPUT"

      - name: Build traffic policy from policy.yml (YAML or JSON -> JSON)
        id: policy
        shell: bash
        run: |
          set -euo pipefail

          # If file is valid JSON, use jq to compact it.
          # Otherwise, treat as YAML and convert with yq.
          if jq -e . policy.yml >/dev/null 2>&1; then
            POLICY_JSON=$(jq -c . policy.yml)
          else
            POLICY_JSON=$(yq -o=json -I=0 '.' policy.yml)
          fi

          # Ensure single line (defense-in-depth)
          POLICY_JSON=$(echo -n "$POLICY_JSON" | tr -d '\n')

          {
            echo "json<<__EOF__"
            echo -n "${POLICY_JSON}"
            echo
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"

      - name: Call ngrok API (create Endpoint)
        env:
          TOKEN: ${{ secrets.NGROK_API_TOKEN }}   # Use an Environment or Repo secret with this name
        shell: bash
        run: |
          set -euo pipefail

          # Base args (required)
          DATA=(
            --data-urlencode "url=${{ steps.cfg.outputs.url }}"
            --data-urlencode "type=${{ steps.cfg.outputs.type }}"
            --data-urlencode "traffic_policy=${{ steps.policy.outputs.json }}"
          )

          # Optional fields if present (non-empty)
          if [[ -n "${{ steps.cfg.outputs.desc }}" ]]; then
            DATA+=( --data-urlencode "description=${{ steps.cfg.outputs.desc }}" )
          fi
          if [[ -n "${{ steps.cfg.outputs.meta }}" ]]; then
            DATA+=( --data-urlencode "metadata=${{ steps.cfg.outputs.meta }}" )
          fi
          if [[ -n "${{ steps.cfg.outputs.pool }}" ]]; then
            DATA+=( --data-urlencode "pooling_enabled=${{ steps.cfg.outputs.pool }}" )
          fi

          echo "Posting to ${NGROK_API_URL} ..."
          HTTP_CODE=$(
            curl -sS -w "%{http_code}" -o /tmp/resp.json \
              --location "${NGROK_API_URL}" \
              --header "Content-Type: application/x-www-form-urlencoded" \
              --header "Ngrok-Version: ${NGROK_API_VERSION}" \
              --header "Authorization: Bearer ${TOKEN}" \
              "${DATA[@]}"
          )

          echo "HTTP ${HTTP_CODE}"
          (jq -C . /tmp/resp.json || cat /tmp/resp.json)

          if [[ "${HTTP_CODE}" -lt 200 || "${HTTP_CODE}" -ge 300 ]]; then
            echo "::error::ngrok API returned HTTP ${HTTP_CODE}"
            exit 1
          fi
